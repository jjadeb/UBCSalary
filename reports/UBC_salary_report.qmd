---
project:
  type: website
  output-dir: docs
title: "UBC Salaries: Exploratory Analysis of Gender"
author: "Jade Bouchard"
format: 
    html: 
        toc: true
        toc-depth: 2
    pdf: 
        toc: true
        toc-depth: 2
bibliography: references.bib
execute: 
    echo: false
    warning: false
editor: source
---

```{python}
import pandas as pd
import pickle
from IPython.display import Markdown, display
from tabulate import tabulate
```


## Aim

This document explores The University of British Columbia (UBC) faculty salaries based on guessed gender. 

## Data

Salary data was sourced from [@salary_data]. To access individual financial reports, click on the yearly links under the header `Statement of Financial Information (SOFI)`.

Gender data was inferred using first names of staff members. In order to guess gender, I used baby name datasets [@canadian_babyname, @american_babyname, @indian_babyname].


## Methods

The Python programming language [@Python] was used to perform this analysis.

## Data collection

As mentioned earlier, for UBC salary data, I used the PDF salary information that UBC releases every year [@salary_data]. The following steps were taken to collect the data.

- Use the `requests` package to accesses the UBC Financial Reports [webpage](https://finance.ubc.ca/reporting-planning-analysis/reports-and-disclosures).
- Extract links to annual salary PDFs by locating the "Statement of Financial Information (SOFI)" section on the webpage and parsing the links.
- If there are any links (and associated PDFs) for which we have not already collected salary data, extract the text from the PDF using the package `pypdf`.
- Open the stored salary data dictionary
- Add the new salary text data to the salary data dictionary

The code does not necissarily follow the order of steps described above.

An exerpt of the raw salary data is below.

```{python}
  with open("../data/salary_data/raw_salary_data.pickle", "rb") as raw_salary_dict:
        raw_salary_text_data = pickle.load(raw_salary_dict)

print(raw_salary_text_data["2020"][200210:200300])
```


### Data cleaning

In this section, the following steps are taken to clean the salary data:

- Remove special charachters from text. For example, ÅŸ.
- Removes unnecessary text content. For example, the "[Auditor's] Qualified Opinion".
- Uses regex to process the raw text data into a structured DataFrame with columns: `Name`, `Remuneration`, `Expenses`.
- Splits the `Name` column into first and last names. 
- Converts salary values to a numeric data type.
- Shortens first and last name to allow for easier name matching between years. For example, someone's name in 2020 could be "Bob M Sherbert" and in 2021 their name could be "Bob-M Sherbert". This name would be shortened to Bob Sherbert to avoid mismatching.
- Concatenate dataframes from all years together.

@tbl-cleandata shows an expert of the cleaned salary data.
```{python}
#| label: tbl-cleandata
#| tbl-cap: Clean UBC Salary Data
clean_salary_data = pd.read_csv("../data/salary_data/clean_salary_data/all_clean_salary_data.csv")
clean_salary_data.head()
```

## Gender Prediction 

### Babyname Corpus
In order to predict gender, I used datasets with babynames and assigned genders. In order to have a somewhat diverse set of baby names, I used babynames from canadian, american, and indian sources [@canadian_babyname, @american_babyname, @indian_babyname].

For each UBC staff name, I found whether that name was more common among girls or boys in the babyname dataset. Then, I guessed the gender that was most common. Any staff names that had less than an 80% gender majority were given a null gender.

```{python}
#| label: tbl-babynames
#| tbl-cap: Babyname Data
clean_babynames = pd.read_csv("../data/gender_corpus/clean_name_corpus.csv")
low_accuracy_df = clean_babynames.sort_values(by="Accuracy").head(1)
low_accuracy_name = low_accuracy_df.iloc[0]["First_Name"]
low_accuracy_df
```

In @tbl-babynames, the accuracy column shows the percentage of gender majority from the babyname dataset. We can see the name `{python} low_accuracy_name` has about the same number of boy and girl names. So, anyone with that name would have a gender value of `None` assigned.

### NLTK


### Cleaning


## Results



## References